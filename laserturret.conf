[GPIO]
x_ccw_limit_pin = 21
x_cw_limit_pin = 18
y_ccw_limit_pin = 4
y_cw_limit_pin = 20

[MQTT]
broker = localhost
port = 1883
topic = laserturret

[Motor]
#x_dir_pin = 19
x_dir_pin = 26
#x_step_pin = 23
x_step_pin = 24
#x_enable_pin = 5
x_enable_pin = 6
#y_dir_pin = 26
y_dir_pin = 19
#y_step_pin = 24
y_step_pin = 23
#y_enable_pin = 6
y_enable_pin = 5
#ms1_pin = 17
ms1_pin = 17
#ms2_pin = 27
ms2_pin = 27
#ms3_pin = 22
ms3_pin = 22
microsteps = 8
steps_per_rev = 200

[Control]
# Maximum steps to move per MQTT message
max_steps_per_update = 50
# Values between -5 and 5 are ignored
deadzone = 5
# Adjust this to change movement sensitivity
speed_scaling = 0.10
# Delay between steps for smooth movement
step_delay = 0.0005

[Laser]
laser_pin = 12
laser_max_power = 100

[Camera]
# Camera resolution
width = 1920
height = 1080

# Camera format (RGB888, YUV420, etc.)
format = RGB888

# Number of camera buffers
buffer_count = 2

[Detection]
# Object detection method: 'haar' (OpenCV Haar Cascades) or 'tflite' (TensorFlow Lite)
# haar: Fast, simple, works for faces/bodies (legacy, lower accuracy)
# tflite: Slower but more accurate, detects 80+ object classes
detection_method = tflite

# TensorFlow Lite model (only used if detection_method = tflite)
# Available models: 'ssd_mobilenet_v2', 'efficientdet_lite0'
tflite_model = ssd_mobilenet_v2

# Use Coral USB Accelerator for TFLite inference (requires Coral hardware)
use_coral = false

# Confidence threshold for TFLite detections (0.0-1.0)
# Higher = fewer false positives, lower = more detections
tflite_confidence = 0.5

# Classes to detect with TFLite (comma-separated, empty = all classes)
# Example: person,cat,dog,bird
# See COCO_LABELS in tflite_detector.py for full list
tflite_filter_classes =